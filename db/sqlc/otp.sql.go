// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: otp.sql

package db

import (
	"context"
	"time"
)

const addOtp = `-- name: AddOtp :one
INSERT INTO otp (otp, email, expiry)
VALUES ($1, $2, $3)
ON CONFLICT (email) DO UPDATE SET otp = EXCLUDED.otp, expiry = EXCLUDED.expiry
RETURNING otp, email, expiry, verified
`

type AddOtpParams struct {
	Otp    string    `json:"otp"`
	Email  string    `json:"email"`
	Expiry time.Time `json:"expiry"`
}

func (q *Queries) AddOtp(ctx context.Context, arg AddOtpParams) (Otp, error) {
	row := q.db.QueryRowContext(ctx, addOtp, arg.Otp, arg.Email, arg.Expiry)
	var i Otp
	err := row.Scan(
		&i.Otp,
		&i.Email,
		&i.Expiry,
		&i.Verified,
	)
	return i, err
}

const deleteOtp = `-- name: DeleteOtp :exec
DELETE FROM otp WHERE email = $1
`

func (q *Queries) DeleteOtp(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteOtp, email)
	return err
}

const getOtp = `-- name: GetOtp :one
SELECT otp, email, expiry, verified FROM otp WHERE otp = $1 LIMIT 1
`

func (q *Queries) GetOtp(ctx context.Context, otp string) (Otp, error) {
	row := q.db.QueryRowContext(ctx, getOtp, otp)
	var i Otp
	err := row.Scan(
		&i.Otp,
		&i.Email,
		&i.Expiry,
		&i.Verified,
	)
	return i, err
}

const getOtpByEmail = `-- name: GetOtpByEmail :one
SELECT otp, email, expiry, verified FROM otp WHERE email = $1 LIMIT 1
`

func (q *Queries) GetOtpByEmail(ctx context.Context, email string) (Otp, error) {
	row := q.db.QueryRowContext(ctx, getOtpByEmail, email)
	var i Otp
	err := row.Scan(
		&i.Otp,
		&i.Email,
		&i.Expiry,
		&i.Verified,
	)
	return i, err
}

const updateOtp = `-- name: UpdateOtp :exec
UPDATE otp SET verified = 'true' WHERE otp = $1
`

func (q *Queries) UpdateOtp(ctx context.Context, otp string) error {
	_, err := q.db.ExecContext(ctx, updateOtp, otp)
	return err
}
